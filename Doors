local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GameData = ReplicatedStorage:WaitForChild("GameData")
local Floor = GameData:WaitForChild("Floor")
local Fools = Floor.Value == "Fools"
local Hotel = Floor.Value == "Hotel"
local Rooms = Floor.Value == "Rooms"
local Mines = Floor.Value == "Mines"
local Retro = Floor.Value == "Retro"
local Backdoor = Floor.Value == "Backdoor"
if Fools then
RemotesFolder = ReplicatedStorage.EntityInfo
else
RemotesFolder = ReplicatedStorage.RemotesFolder
end
--// Script \\
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
local Window = Fluent:CreateWindow({
    Title = "YOUHUB | DOORS | ".. game:GetService("Players").LocalPlayer.Name,
    SubTitle = "Version 'Beta' v0.0.2",
    TabWidth = 160,
    Size = UDim2.fromOffset(500, 400),
    Acrylic = true,
    Theme = "Aqua",
    MinimizeKey = Enum.KeyCode.LeftControl
})
Fluent:Notify({
        Title = "Keybind Toggle",
        Content = "Enum.KeyCode.LeftControl",
        SubContent = "Press keybind 'LeftControl' to Toggle UI",
        Duration = 5
    })
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    Players = Window:AddTab({ Title = "Players", Icon = "user" }),
    Entities = Window:AddTab({ Title = "Entities", Icon = "shield" }),
    Visual = Window:AddTab({ Title = "Visual", Icon = "eye" }),
    ESP = Window:AddTab({ Title = "ESP", Icon = "book" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}
Tabs.Main:AddSection("Death")
if Fools then
Tabs.Main:AddDropdown("MyDropdown",{
        Title = "Select On Death",
        Values = {"Revive [FREE]", "Leave", "Lobby"},
        Multi = false,
        Default = 1,
        Callback = function(v)
_G.SelectOnDeath = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.EnabledOnDeath then
if game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 and _G.SelectOnDeath == "Lobby" then
RemotesFolder.Lobby:FireServer()
elseif game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 and _G.SelectOnDeath == "Leave" then
game:Shutdown()
elseif game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 and _G.SelectOnDeath == "Revive [FREE]" then
RemotesFolder.Revive:FireServer()
end
end
end)
end})
Tabs.Main:AddToggle("MyToggle",{
Title = "Enabled On Death",
Default = false,
Callback = function(v)
_G.EnabledOnDeath = v
end})
else
Tabs.Main:AddDropdown("MyDropdown",{
        Title = "Select On Death",
        Values = {"Revive [NOT FREE]", "Leave", "Lobby"},
        Multi = false,
        Default = 1,
        Callback = function(v)
_G.SelectOnDeath = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.EnabledOnDeath then
if game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 and _G.SelectOnDeath == "Lobby" then
RemotesFolder.Lobby:FireServer()
elseif game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 and _G.SelectOnDeath == "Leave" then
game:Shutdown()
elseif game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 and _G.SelectOnDeath == "Revive [NOR FREE]" then
RemotesFolder.Revive:FireServer()
end
end
end)
end})
Tabs.Main:AddToggle("MyToggle",{
Title = "Enabled On Death",
Default = false,
Callback = function(v)
_G.EnabledOnDeath = v
end})
end
Tabs.Main:AddSection("Fast")
game:GetService("RunService").RenderStepped:Connect(function()
pcall(function()
if _G.FastDoors then game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Door"):SetAttribute("FastOpen", true)
end 
end)
end)
Tabs.Main:AddToggle("MyToggle",{
Title = "Fast Doors",
Default = false,
Callback = function(v)
_G.FastDoors = v
end})
game:GetService("RunService").RenderStepped:Connect(function()
pcall(function()
if _G.FastDupe then game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("DoorFake"):SetAttribute("FastOpen", true)
end 
end)
end)
Tabs.Main:AddToggle("MyToggle",{
Title = "Fast Dupe",
Default = false,
Callback = function(v)
_G.FastDupe = v
end})
Tabs.Main:AddSection("Reach")
game:GetService("RunService").RenderStepped:Connect(function()
pcall(function()
if _G.DoorsReach then game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Door").ClientOpen:FireServer()
end 
end)
end)
Tabs.Main:AddToggle("MyToggle",{
Title = "Doors Reach",
Default = false,
Callback = function(v)
_G.DoorsReach = v
end})
game:GetService("Workspace").CurrentRooms.DescendantAdded:Connect(function(v)
    if not _G.IncreasedDistance then return end
    if v.IsA(v,"ProximityPrompt") then
       if _G.IncreasedDistance then
           v.MaxActivationDistance *= _G.IncreasedDistance and 2 or 0.5
       end
    end
end)
Tabs.Main:AddToggle("MyToggle",{
Title = "Reach",
Default = false,
Callback = function(v)
_G.IncreasedDistance = v
for _,v in pairs(workspace:GetDescendants()) do
  if v.IsA(v,"ProximityPrompt") then
       if _G.IncreasedDistance then
           v.MaxActivationDistance *= _G.IncreasedDistance and 2 or 0.5
          end
       end
    end
end})
Tabs.Main:AddSection("Interact")
game:GetService("Workspace").CurrentRooms.DescendantAdded:Connect(function(v)
    if not _G.ThroughInteract then return end
    if v.IsA(v,"ProximityPrompt") then
       if _G.ThroughInteract then
           v.RequiresLineOfSight = _G.ThroughInteract and false or true
       end
    end
end)
Tabs.Main:AddToggle("MyToggle",{
Title = "Through Interact",
Default = false,
Callback = function(v)
_G.ThroughInteract = v
for _,v in pairs(workspace:GetDescendants()) do
  if not _G.ThroughInteract then return end
    if v.IsA(v,"ProximityPrompt") then
       if _G.ThroughInteract then
           v.RequiresLineOfSight = _G.ThroughInteract and false or true
          end
       end
    end
end})
game:GetService("Workspace").CurrentRooms.DescendantAdded:Connect(function(v)
    if not _G.InstanceInteract then return end
    if v.IsA(v,"ProximityPrompt") then
       if _G.InstanceInteract then
           v.HoldDuration = 0
       end
    end
end)
Tabs.Main:AddToggle("MyToggle",{
Title = "Instance Interact",
Default = false,
Callback = function(v)
_G.InstanceInteract = v
for _,v in pairs(workspace:GetDescendants()) do
  if not _G.InstanceInteract then return end
    if v.IsA(v,"ProximityPrompt") then
       if _G.InstanceInteract then
           v.HoldDuration = 0
          end
       end
    end
end})
